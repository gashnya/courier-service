package database

import (
	"database/sql"
	_ "github.com/jackc/pgx/v5/stdlib"
	"os"
)

func SetupDatabase() (*sql.DB, error) {
	db, err := sql.Open("pgx", os.Getenv("POSTGRES_DSN"))
	if err != nil {
		return nil, err
	}

	/*
	 * *_hours can be represented as a custom type (pair), but on the current prototyping stage
	 * it seems to be redundant.
	 *
	 * create type time_interval as (start time, stop time);
	 */
	createTables := `do $$ begin
					 	create type courier_type as enum ('AUTO', 'BIKE', 'FOOT');
					 exception
					 	when duplicate_object then null;
					 end $$;
					 
					 create table if not exists orders (
						 	order_id bigint generated by default as identity,
						 	weight float not null,
						 	region integer not null,
						 	delivery_hours varchar(11)[] not null,
						 	cost integer not null,
						 	completed_time timestamp,
					     
					     	primary key(order_id)
					 );

					 create table if not exists couriers (
  							courier_id bigint generated by default as identity,
  							courier_type courier_type not null,
  							regions integer[] not null,
  							working_hours varchar(11)[] not null,
					     
					     	primary key(courier_id)
					 );

					 create table if not exists completed_orders (
					 		courier_id bigint,
					 		order_id bigint unique,
					        
					        primary key(order_id, courier_id),
					     	constraint fk_courier
      							foreign key(courier_id) 
	  								references couriers(courier_id)
					     			on delete cascade,
							constraint fk_order
      							foreign key(order_id) 
	  								references orders(order_id)
					     			on delete cascade
					 );`

	_, err = db.Exec(createTables)
	if err != nil {
		return nil, err
	}

	return db, err
}
